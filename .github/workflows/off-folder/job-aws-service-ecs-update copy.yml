name: aws-service-ecs-update

on:
  workflow_call:

env:
  AWS_REGION: us-west-2                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ecrrepo2         # set this to your Amazon ECR repository name
  ECS_SERVICE: denzelrr-webservice-service-webservice               # set this to your Amazon ECS service name
  ECS_CLUSTER: ecs-denzelrr-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/task_definition_gh.json      # set this to the path to your Amazon ECS task definition                                           # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: denzelrr-webservice           # set this to the name of the container in the
                                                # containerDefinitions section of your task definition
jobs:
  docker-build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition denzelrr-task-defination-webservice --query taskDefinition > task-definition.json    

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          #image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true